{"version":3,"sources":["services/sensor-info.ts","config.ts","services/actionizer.ts","sew-sensors-list/index.tsx","sew-switch-button/index.tsx","sew-sensors-crud/index.tsx","app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["validateSensorInfo","sensorInfo","SensorInfoRepository","strData","window","localStorage","getItem","JSON","parse","err","console","log","sensorsInfo","Array","isArray","length","setItem","stringify","ACTIONEIZER_URL","process","isActionError","response","errorCode","sendActions","devices","a","body","fetch","method","headers","status","json","NoView","sensor","className","type","sensorId","SensorsView","SWITCH","React","payload","loading","action","setAction","runAction","deviceId","actions","data-testid","onClick","disabled","style","backgroundColor","color","name","SewSensorsList","sensors","map","Component","defaultColors","sensorInfoReducer","state","initialState","isSensorInfoCompleted","SewSensorsCRUDAdd","addSensor","updateSensor","onChange","ev","target","value","triangle","colors","onChangeComplete","hex","SewSensorsCRUDInfoList","deleteSensor","index","SewSensorsCRUD","slice","App","setSensorsInfo","saveSensorInfo","path","to","exact","activeClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8818b391.chunk.js","sourcesContent":["import { SensorId, SensorType } from './actionizer';\n\nconst validateSensorInfo = (sensorInfo: SensorInfo) => {\n    if (!sensorInfo || typeof sensorInfo !== 'object') return false;\n    if (typeof sensorInfo['deviceId'] !== 'string') return false;\n    if (typeof sensorInfo['sensorId'] !== 'string') return false;\n    if (typeof sensorInfo['type'] !== 'string') return false;\n    if (typeof sensorInfo['name'] !== 'string') return false;\n    return true;\n};\n\nexport type SensorInfo = {\n    deviceId: string;\n    sensorId: SensorId;\n    type: SensorType;\n    name: string;\n    color?: string;\n};\n\nexport const SensorInfoRepository = {\n    load: (): SensorInfo[] => {\n        const strData = window.localStorage.getItem('sensor-info');\n        if (!strData) return [];\n        try {\n            const repo = JSON.parse(strData);\n            return repo;\n        } catch (err) {\n            console.log('Error parsing data', err);\n            return [];\n        }\n    },\n    save: (sensorsInfo: SensorInfo[]) => {\n        if (!Array.isArray(sensorsInfo) || sensorsInfo.length < 1) return false;\n        for (const sensorInfo of sensorsInfo) {\n            if (!validateSensorInfo(sensorInfo)) return false;\n        }\n        window.localStorage.setItem('sensor-info', JSON.stringify(sensorsInfo));\n        return true;\n    }\n};\n","export const ACTIONEIZER_URL = process.env.REACT_APP_ACTIONEIZER_URL || 'http://localhost/';\n","import { ACTIONEIZER_URL } from '../config';\n\nexport type SensorId = string;\nexport type SensorType = 'SWITCH' | 'DISTANCE';\nexport type SwitchValues = 0 | 1;\nexport type ActionPayload = SwitchValues;\nexport type Action = {\n    sensorId: SensorId;\n    type: SensorType;\n    payload: ActionPayload;\n};\nexport type Device = {\n    deviceId: string;\n    actions: Action[];\n};\n\nexport type ActionizerResponse = { actionIndex: number; status: number };\nexport type ActionizerErrorResponse = { errorCode: number };\nexport const isActionError = (response: ActionizerResponse[] | ActionizerErrorResponse): response is ActionizerErrorResponse => {\n    if (!!(response as ActionizerErrorResponse).errorCode) return true;\n    return false;\n};\n\nexport async function sendActions(devices: Device | Device[]): Promise<ActionizerResponse[] | ActionizerErrorResponse> {\n    const body = Array.isArray(devices) ? devices : [devices];\n    if (body.length < 1) return [];\n    const response = await fetch(ACTIONEIZER_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    });\n    if (response.status === 200 || response.status === 202) return response.json();\n    return { errorCode: response.status };\n}\n","import * as React from 'react';\nimport { SensorInfo } from '../services/sensor-info';\nimport { SewSwitchButton } from '../sew-switch-button';\nimport './styles.css';\n\nconst NoView: React.FC<{ sensor: SensorInfo }> = ({ sensor }) => (\n    <div className='NoView'>\n        {sensor.type} - {sensor.sensorId}\n    </div>\n);\nconst SensorsView: { [key: string]: React.FC<any> } = {\n    SWITCH: SewSwitchButton\n};\nexport type SewSensorsListProps = {\n    sensors?: SensorInfo[];\n};\nexport const SewSensorsList: React.FC<SewSensorsListProps> = ({ sensors }) => {\n    if (!Array.isArray(sensors) || sensors.length < 1) {\n        return (\n            <div>\n                <div>No Sensors found!</div>\n                <div>Add Sensors</div>\n            </div>\n        );\n    }\n    return (\n        <div className='ButtonsList'>\n            {sensors.map(sensorInfo => {\n                const Component = SensorsView[sensorInfo.type] ? SensorsView[sensorInfo.type] : NoView;\n                return <Component key={sensorInfo.sensorId} sensor={sensorInfo} />;\n            })}\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { SensorInfo } from '../services/sensor-info';\nimport { sendActions, isActionError, ActionPayload } from '../services/actionizer';\nimport './styles.css';\n\nexport type SewSwitchButtonProps = {\n    sensor: SensorInfo;\n};\nexport type SewSwitchButtonState = { loading: boolean; payload: ActionPayload | -1 };\nexport const SewSwitchButton: React.FC<SewSwitchButtonProps> = ({ sensor }) => {\n    const [action, setAction] = React.useState<SewSwitchButtonState>({\n        payload: 0,\n        loading: false\n    });\n\n    const runAction = React.useCallback(\n        async (payload: ActionPayload) => {\n            try {\n                setAction(action => ({ ...action, loading: true }));\n                const response = await sendActions({\n                    deviceId: sensor.deviceId,\n                    actions: [{ sensorId: sensor.sensorId, type: sensor.type, payload }]\n                });\n                setAction(action => ({\n                    payload: isActionError(response) ? -1 : payload,\n                    loading: false\n                }));\n            } catch (error) {\n                setAction(action => ({\n                    payload: -1,\n                    loading: false\n                }));\n            }\n        },\n        [sensor]\n    );\n\n    React.useEffect(() => {\n        // Start button in OFF state\n        runAction(0);\n    }, [runAction]);\n    return (\n        <button\n            className='ButtonSwitch'\n            data-testid={`sew-switch-button-${sensor.sensorId}`}\n            onClick={() => runAction(action.payload === 0 ? 1 : 0)}\n            disabled={action.loading}\n            style={{ backgroundColor: sensor.color }}\n        >\n            <div className='ButtonSwitchState'>\n                {action.loading ? 'Loading' : action.payload === 1 ? 'ON' : action.payload === -1 ? '??' : 'OFF'}\n            </div>\n            <div className='ButtonSwitchName'>{sensor.name}</div>\n        </button>\n    );\n};\n","import * as React from 'react';\nimport { SensorType } from '../services/actionizer';\nimport { SensorInfo } from '../services/sensor-info';\nimport { GithubPicker } from 'react-color';\nimport './styles.css';\n\nconst defaultColors = ['firebrick', '#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB'];\nconst sensorInfoReducer = (state: SensorInfo, action: Partial<SensorInfo>) => ({ ...state, ...action });\nconst initialState: SensorInfo = {\n    deviceId: '',\n    sensorId: '',\n    name: '',\n    type: 'SWITCH',\n    color: '#DB3E00'\n};\nconst isSensorInfoCompleted = (sensor: SensorInfo) => {\n    if (!sensor.deviceId || sensor.deviceId.length < 6) return false;\n    if (!sensor.sensorId || sensor.sensorId.length < 8) return false;\n    if (!sensor.name || sensor.name.length < 3) return false;\n    return true;\n};\nexport type SewSensorsCRUDAddProps = {\n    addSensor: (sensors: SensorInfo) => void;\n};\nexport const SewSensorsCRUDAdd: React.FC<SewSensorsCRUDAddProps> = ({ addSensor }) => {\n    const [sensor, updateSensor] = React.useReducer(sensorInfoReducer, initialState);\n    return (\n        <div className='CRUDListAdd'>\n            <div className='CRUDListAddField'>\n                <span className='CRUDListAddFieldLabel'>Device ID</span>\n                <input\n                    className='CRUDListAddFieldValue'\n                    type='text'\n                    data-testid='sew-sensors-crud-input-deviceid'\n                    onChange={ev => updateSensor({ deviceId: ev.target.value })}\n                    value={sensor.deviceId}\n                />\n            </div>\n            <div className='CRUDListAddField'>\n                <span className='CRUDListAddFieldLabel'>Sensor ID</span>\n                <input\n                    className='CRUDListAddFieldValue'\n                    type='text'\n                    data-testid='sew-sensors-crud-input-sensorid'\n                    onChange={ev => updateSensor({ sensorId: ev.target.value })}\n                    value={sensor.sensorId}\n                />\n            </div>\n            <div className='CRUDListAddField'>\n                <span className='CRUDListAddFieldLabel'>Sensor Name</span>\n                <input\n                    className='CRUDListAddFieldValue'\n                    type='text'\n                    data-testid='sew-sensors-crud-input-name'\n                    onChange={ev => updateSensor({ name: ev.target.value })}\n                    value={sensor.name}\n                />\n            </div>\n            <div className='CRUDListAddField'>\n                <span className='CRUDListAddFieldLabel'>Sensor Type</span>\n                <select\n                    className='CRUDListAddFieldValue'\n                    data-testid='sew-sensors-crud-select-type'\n                    onChange={ev => updateSensor({ type: ev.target.value as SensorType })}\n                    value={sensor.type}\n                >\n                    <option value='SWITCH'>SWITCH</option>\n                    <option value='DCMOTOR'>DCMOTOR</option>\n                    <option value='DISTANCE'>DISTANCE</option>\n                </select>\n            </div>\n            <div className='CRUDListAddField'>\n                <span className='CRUDListAddFieldLabel'>Sensor Color</span>\n                <GithubPicker\n                    triangle='hide'\n                    colors={defaultColors}\n                    className='CRUDListAddFieldValue'\n                    color={sensor.color}\n                    onChangeComplete={color => updateSensor({ color: color.hex })}\n                />\n            </div>\n            <button\n                data-testid='sew-sensors-crud-button-save'\n                disabled={!isSensorInfoCompleted(sensor)}\n                onClick={() => addSensor(sensor)}\n                className={!isSensorInfoCompleted(sensor) ? 'CRUDListAddButtonDisabled' : 'CRUDListAddButton'}\n            >\n                SAVE\n            </button>\n        </div>\n    );\n};\n\nexport type SewSensorsCRUDInfoListProps = {\n    sensors?: SensorInfo[];\n    deleteSensor: (index: number) => void;\n};\nexport const SewSensorsCRUDInfoList: React.FC<SewSensorsCRUDInfoListProps> = ({ sensors, deleteSensor }) => {\n    if (!Array.isArray(sensors) || sensors.length < 1) {\n        return (\n            <div className='CRUDListNoSensors'>\n                <div>No Sensors found!</div>\n            </div>\n        );\n    }\n    return (\n        <div className='CRUDListSensors'>\n            {sensors.map((sensorInfo, index) => (\n                <div\n                    key={sensorInfo.sensorId}\n                    data-testid={`sew-sensors-crud-list-${sensorInfo.sensorId}`}\n                    className='CRUDListSensorsItem'\n                    style={{ backgroundColor: sensorInfo.color }}\n                >\n                    <div className='CRUDListSensorsItemLabels'>\n                        <div>{sensorInfo.name}</div>\n                        <div>{sensorInfo.deviceId}</div>\n                        <div>{sensorInfo.sensorId}</div>\n                    </div>\n                    <button\n                        data-testid={`sew-sensors-crud-button-delete`}\n                        onClick={() => deleteSensor(index)}\n                        className='CRUDListSensorsItemButton'\n                    >\n                        DELETE\n                    </button>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport type SewSensorsCRUDProps = {\n    sensors?: SensorInfo[];\n    onChange: (sensors: SensorInfo[]) => void;\n};\nexport const SewSensorsCRUD: React.FC<SewSensorsCRUDProps> = ({ sensors = [], onChange }) => {\n    return (\n        <div className='CRUDList'>\n            <SewSensorsCRUDAdd addSensor={sensor => onChange([...sensors, sensor])} />\n            <SewSensorsCRUDInfoList\n                sensors={sensors}\n                deleteSensor={(index: number) => onChange([...sensors.slice(0, index), ...sensors.slice(index + 1)])}\n            />\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { HashRouter as Router, Switch, Route, NavLink } from 'react-router-dom';\nimport { SensorInfo, SensorInfoRepository } from '../services/sensor-info';\nimport { SewSensorsList } from '../sew-sensors-list';\nimport { SewSensorsCRUD } from '../sew-sensors-crud';\nimport './styles.css';\n\nfunction App() {\n    const [sensorsInfo, setSensorsInfo] = React.useState(() => SensorInfoRepository.load());\n    const saveSensorInfo = React.useCallback((sensors: SensorInfo[]) => {\n        SensorInfoRepository.save(sensors);\n        setSensorsInfo(sensors);\n    }, []);\n    return (\n        <Router>\n            <div className='App'>\n                <div className='Title'>Alarm UI</div>\n                <div className='Body'>\n                    <Switch>\n                        <Route path='/sensors'>\n                            <SewSensorsCRUD sensors={sensorsInfo} onChange={saveSensorInfo} />\n                        </Route>\n                        <Route path='/'>\n                            <SewSensorsList sensors={sensorsInfo} />\n                        </Route>\n                    </Switch>\n                </div>\n                <div className='Sections'>\n                    <NavLink to='/' exact className={'TabSection'} activeClassName='TabSectionSelected'>\n                        Buttons\n                    </NavLink>\n                    <NavLink to='/sensors' className='TabSection' activeClassName='TabSectionSelected'>\n                        Sensors\n                    </NavLink>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}